package org.voltdb.sqlparser.symtab;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Condition;
import org.assertj.core.api.Fail;
import org.voltdb.sqlparser.semantics.symtab.Column;

/**
 * {@link Column} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ColumnAssert extends AbstractAssert<ColumnAssert, Column> {

    /**
     * Creates a new </code>{@link ColumnAssert}</code> to make assertions on actual Column.
     * @param actual the Column we want to make assertions on.
     */
    public ColumnAssert(Column actual) {
        super(actual, ColumnAssert.class);
    }

    /**
     * An entry point for ColumnAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one's can write directly : <code>assertThat(myColumn)</code> and get specific assertion with code completion.
     * @param actual the Column we want to make assertions on.
     * @return a new </code>{@link ColumnAssert}</code>
     */
    public static ColumnAssert assertThat(Column actual) {
        return new ColumnAssert(actual);
    }
    /**
     * Verifies that the actual Column's type is equal to the given one.
     * @param type the given type to compare the actual Column's type to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Column's type is not equal to the given one.
     */
    public static Condition<Column> withColumnTypeNamed(final String aTypeName) {
        return new Condition<Column>() {
            @Override
            public boolean matches(Column aValue) {
                String actualTypeName = aValue.getType().getName();
                if (!actualTypeName.equalsIgnoreCase(aTypeName)) {
                    String message = String.format(
                            "\nExpected type name to be:\n  <%s>\n but was:\n  <%s>",
                            aTypeName, actualTypeName);
                    Fail.fail(message);
                    return false;
                }
                return true;
            }
        };
    }
}
