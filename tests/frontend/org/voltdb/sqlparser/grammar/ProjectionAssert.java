package org.voltdb.sqlparser.grammar;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.voltdb.sqlparser.semantics.grammar.Projection;

/**
 * {@link Projection} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ProjectionAssert extends
        AbstractAssert<ProjectionAssert, Projection> {

    /**
     * Creates a new </code>{@link ProjectionAssert}</code> to make assertions on actual Projection.
     * @param actual the Projection we want to make assertions on.
     */
    public ProjectionAssert(Projection actual) {
        super(actual, ProjectionAssert.class);
    }

    /**
     * An entry point for ProjectionAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one's can write directly : <code>assertThat(myProjection)</code> and get specific assertion with code completion.
     * @param actual the Projection we want to make assertions on.
     * @return a new </code>{@link ProjectionAssert}</code>
     */
    public static ProjectionAssert assertThat(Projection actual) {
        return new ProjectionAssert(actual);
    }

    /**
     * Verifies that the actual Projection's alias is equal to the given one.
     * @param alias the given alias to compare the actual Projection's alias to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Projection's alias is not equal to the given one.
     */
    public ProjectionAssert hasAlias(String alias) {
        // check that actual Projection we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format(
                "\nExpected <%s> alias to be:\n  <%s>\n but was:\n  <%s>",
                actual, alias, actual.getAlias());

        // check
        if (!actual.getAlias().equals(alias)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual Projection's columnName is equal to the given one.
     * @param columnName the given columnName to compare the actual Projection's columnName to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Projection's columnName is not equal to the given one.
     */
    public ProjectionAssert hasColumnName(String columnName) {
        // check that actual Projection we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format(
                "\nExpected <%s> columnName to be:\n  <%s>\n but was:\n  <%s>",
                actual, columnName, actual.getColumnName());

        // check
        if (!actual.getColumnName().equals(columnName)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual Projection's tableName is equal to the given one.
     * @param tableName the given tableName to compare the actual Projection's tableName to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Projection's tableName is not equal to the given one.
     */
    public ProjectionAssert hasTableName(String tableName) {
        // check that actual Projection we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format(
                "\nExpected <%s> tableName to be:\n  <%s>\n but was:\n  <%s>",
                actual, tableName, actual.getTableName());

        // check
        if (!actual.getTableName().equals(tableName)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

}
