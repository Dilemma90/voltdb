package org.voltdb.sqlparser.symtab;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.voltdb.sqlparser.semantics.symtab.Top;

/**
 * {@link Top} specific assertions - Generated by CustomAssertionGenerator.
 */
public class TopAssert extends AbstractAssert<TopAssert, Top> {

    /**
     * Creates a new </code>{@link TopAssert}</code> to make assertions on actual Top.
     * @param actual the Top we want to make assertions on.
     */
    public TopAssert(Top actual) {
        super(actual, TopAssert.class);
    }

    /**
     * An entry point for TopAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one's can write directly : <code>assertThat(myTop)</code> and get specific assertion with code completion.
     * @param actual the Top we want to make assertions on.
     * @return a new </code>{@link TopAssert}</code>
     */
    public static TopAssert assertThat(Top actual) {
        return new TopAssert(actual);
    }

    /**
     * Verifies that the actual Top's maxSize is equal to the given one.
     * @param maxSize the given maxSize to compare the actual Top's maxSize to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Top's maxSize is not equal to the given one.
     */
    public TopAssert hasMaxSize(long maxSize) {
        // check that actual Top we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format(
                "\nExpected <%s> maxSize to be:\n  <%s>\n but was:\n  <%s>",
                actual, maxSize, actual.getMaxSize());

        // check
        if (actual.getMaxSize() != maxSize) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual Top's name is equal to the given one.
     * @param name the given name to compare the actual Top's name to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Top's name is not equal to the given one.
     */
    public TopAssert hasName(String name) {
        // check that actual Top we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format(
                "\nExpected <%s> name to be:\n  <%s>\n but was:\n  <%s>",
                actual, name, actual.getName());

        // check
        if (!actual.getName().equals(name)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual Top's nominalSize is equal to the given one.
     * @param nominalSize the given nominalSize to compare the actual Top's nominalSize to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Top's nominalSize is not equal to the given one.
     */
    public TopAssert hasNominalSize(long nominalSize) {
        // check that actual Top we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format(
                "\nExpected <%s> nominalSize to be:\n  <%s>\n but was:\n  <%s>",
                actual, nominalSize, actual.getNominalSize());

        // check
        if (actual.getNominalSize() != nominalSize) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

}
